# React Blog Project Notes

## 1. Dependencies Installation
```bash
# Core Dependencies
npm install @reduxjs/toolkit react-redux react-router-dom

# Appwrite and Related
npm i appwrite
npm i @tinymce/tinymce-react
npm i html-react-parser
npm install react-hook-form
```

## 2. Environment Variables
### Why Use Environment Variables?
- **Security**: Protect sensitive information (API keys, credentials)
- **Configuration Flexibility**: Different settings for different environments
- **Avoid Hardcoding**: Makes code reusable and maintainable

### Important Rules:
1. Never commit `.env` file to GitHub (add to `.gitignore`)
2. In Vite projects:
   - Prefix variables with `VITE_`
   - Access using `import.meta.env.VITE_VARIABLE_NAME`
3. Restart project when modifying environment variables

### Appwrite Configuration
Required environment variables:
```
VITE_APPWRITE_URL=your_api_endpoint
VITE_APPWRITE_PROJECT_ID=your_project_id
VITE_APPWRITE_DATABASE_ID=your_database_id
VITE_APPWRITE_COLLECTION_ID=your_collection_id
VITE_APPWRITE_BUCKET_ID=your_bucket_id
```

## 3. Project Structure

### Appwrite Services
- `auth_service.js`: Authentication handling
- `appwriteconfig.js`: Appwrite configuration

### Redux Store Setup
```javascript
import { configureStore } from '@reduxjs/toolkit';

const store = configureStore({
    reducer: {
        // your reducers here
    }
});
```

### Components
1. Header
2. Footer
3. LogoutBtn
4. AuthLayout (for protected routes)

## 4. Important Concepts

### Form Handling
- Use `react-hook-form` for form management
- `{...register}` syntax for form fields
- `handleSubmit` for form submission

### Authentication
- Protected routes using `AuthLayout`
- Regular expression validation for login forms
- CORS handling for API requests

### Rich Text Editor (RTE)
```javascript
<Editor
    initialValue='default value'
    init={{
        branding: false,
        height: 500,
        menubar: true,
        plugins: []
    }}
/>
```

### Performance Optimization
```javascript
React.useEffect(() => {
    const subscription = watch()
    return () => {
        subscription.unsubscribe()
    }
}, [])
```

## 5. Debugging Tips
- Check CORS errors in browser console
- Verify environment variables are loaded
- Ensure proper authentication flow
- Monitor Redux state changes

## 6. Best Practices
1. Always use environment variables for sensitive data
2. Implement proper error handling
4. Follow React hooks best practices
5. Implement proper loading states
6. Use proper authentication checks

## 7. Useful Links
- Redux Toolkit: https://redux-toolkit.js.org/introduction/getting-started
- Appwrite: https://www.npmjs.com/package/appwrite
- TinyMCE React: https://www.npmjs.com/package/@tinymce/tinymce-react
- React Hook Form: https://react-hook-form.com/get-started
- CORS Guide: https://developer.mozilla.org/en-US/docs/Web/HTTP/Guides/CORS
- Vite Environment Variables: https://vite.dev/guide/env-and-mode

## 8. Detailed 

### Understanding the Project Structure
1. **Frontend Structure**
   - `src/`: Main source code directory
   - `components/`: Reusable UI components
   - `pages/`: Full page components
   - `appwrite/`: Backend service configurations
   - `store/`: Redux state management

2. **Key Files and Their Purposes**
   - `App.jsx`: Main application component
   - `main.jsx`: Application entry point
   - `index.css`: Global styles
   - `.env`: Environment variables (not in git)

### Step-by-Step Setup Guide
1. **Initial Setup**
   ```bash
   # Create new Vite project
   npm create vite@latest my-blog -- --template react
   cd my-blog
   npm install
   ```

2. **Install Dependencies**
   ```bash
   # Core dependencies
   npm install @reduxjs/toolkit react-redux react-router-dom
   
   # Additional dependencies
   npm i appwrite @tinymce/tinymce-react html-react-parser react-hook-form
   ```

3. **Appwrite Setup**
   - Create account on appwrite.io
   - Create new project
   - Set up database and collection
   - Create storage bucket for images
   - Copy credentials to `.env` file

4. **Environment Variables**
   Create `.env` file in project root:
   ```
   VITE_APPWRITE_URL=your_url
   VITE_APPWRITE_PROJECT_ID=your_project_id
   VITE_APPWRITE_DATABASE_ID=your_database_id
   VITE_APPWRITE_COLLECTION_ID=your_collection_id
   VITE_APPWRITE_BUCKET_ID=your_bucket_id
   ```

### Understanding Key Concepts

1. **Authentication Flow**
   - User signs up with email/password
   - Appwrite creates user account
   - User logs in and receives session
   - Session is stored in Redux state
   - Protected routes check for valid session

2. **Post Management**
   - Posts are stored in Appwrite database
   - Each post has:
     - Title
     - Content (rich text)
     - Featured image
     - Author (userId)
     - Creation date
     - Status (active/inactive)

3. **File Storage**
   - Images are stored in Appwrite storage
   - Each image gets a unique ID
   - Images are linked to posts via ID

4. **State Management**
   - Redux stores:
     - Authentication state
     - User data
     - Posts data
   - Actions:
     - Login/Logout
     - Create/Edit/Delete posts
     - Update user profile

## 9. Project Summary

### What is this Project?
This is a full-featured blog application built with React and Appwrite backend. It allows users to:
- Create accounts and log in
- Create, edit, and delete blog posts
- Upload images for posts
- View all posts or their own posts
- Use a rich text editor for post content

### How it Works

1. **User Authentication**
   - Users can sign up with email/password
   - Login system with session management
   - Protected routes for authenticated users

2. **Post Management**
   - Create new posts with title, content, and images
   - Edit existing posts
   - Delete posts
   - View all posts or filter by author

3. **Data Flow**
   ```
   User Action → React Component → Redux Action → Appwrite Service → Database
   ```

4. **Key Features**
   - Responsive design
   - Dark/Light mode
   - Rich text editing
   - Image upload
   - User authentication
   - Protected routes
   - Real-time updates

5. **Security**
   - Environment variables for sensitive data
   - Protected routes
   - User-specific permissions
   - Secure file storage

### Technical Stack
- **Frontend**: React + Vite
- **State Management**: Redux Toolkit
- **Routing**: React Router
- **Backend**: Appwrite
- **Form Handling**: React Hook Form
- **Rich Text Editor**: TinyMCE
- **Styling**: Tailwind CSS

This project demonstrates modern React development practices, including:
- Component-based architecture
- State management with Redux
- Protected routing
- File handling
- User authentication
- Environment configuration
- Responsive design
